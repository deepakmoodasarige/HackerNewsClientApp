{"version":3,"sources":["molecules/Stories.tsx","services/hackernewsurl.tsx","services/servicecalls.tsx","organisms/Topstories.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Stories","state","map","item","author","title","score","comments_count","url","time","key","style","padding","className","fontSize","marginTop","marginRight","paddingTop","paddingRight","color","href","target","rel","Fragment","replace","split","baseURL","getData","start","end","a","arr","axios","get","data","slice","push","getDetails","promises","by","descendants","Promise","all","results","withRouter","props","useState","setState","isLoading","useEffect","then","App","path","strict","exact","component","Posts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6106c790.chunk.js","sourcesContent":["import React from \"react\";\n//import timeago from \"epoch-timeago\";\n\nconst Stories = ({ state}:any) => {\n  return (\n    <>\n      {state.map(\n        ({ item, author, title, score, comments_count, time, url }:any) => (\n          <tr key={item}>\n            <td style={{ padding: \"0px\" }}>\n              <i\n                className=\"fas fa-sort-up\"\n                style={{\n                  fontSize: \"30px\",\n                  marginTop: \"16px\",\n                  padding: \"0px\",\n                  marginRight: \"0px\"\n                }}\n              />\n            </td>\n            <td\n              style={{\n                padding: \"0px\",\n                paddingTop: \"13px\",\n                paddingRight: \"15px\",\n                color: \"#828282\"\n              }}\n            >\n              &nbsp;\n              {score}\n            </td>\n            <td style={{ paddingRight: \"80px\", fontSize: \"600\" }}>\n              <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {title}\n              </a>\n            </td>\n            <React.Fragment >\n              <td style={{ color: \"#828282\" }}>\n                <i className=\"fas fa-user\" />{\" \"}\n                <a\n                  href={`https://news.ycombinator.com/user?id=${author}`}\n                  target=\"_blank\"\n                  style={{ color: \"#828282\" }}\n                  rel=\"noopener noreferrer\"\n                >\n                  {author}\n                </a>\n              </td>\n              <td style={{ color: \"#828282\" }}>\n                <i className=\"fas fa-globe\" />{\" \"}\n                <a\n                  href={`https://${\n                    url\n                      .replace(\"http://\", \"\")\n                      .replace(\"https://\", \"\")\n                      .split(/[/?#]/)[0]\n                  }`}\n                  target=\"_blank\"\n                  style={{ color: \"#828282\" }}\n                  rel=\"noopener noreferrer\"\n                >\n                  {url\n                    .replace(\"http://\", \"\")\n                    .replace(\"https://\", \"\")\n                    .split(/[/?#]/)[0]\n                    .replace(\"www.\", \"\")}\n                </a>\n              </td>\n              <td style={{ color: \"#828282\" }}>\n                \n              </td>\n              <td style={{ color: \"#828282\" }}>\n                <i className=\"far fa-comment-alt\" />{\" \"}\n                <a\n                  href={`https://news.ycombinator.com/item?id=${item}`}\n                  target=\"_blank\"\n                  style={{ color: \"#828282\" }}\n                  rel=\"noopener noreferrer\"\n                >\n                  {comments_count}\n                </a>\n              </td>\n            </React.Fragment>\n          </tr>\n        )\n      )}\n    </>\n  );\n};\nexport default Stories;\n","\nexport const baseURL = \"https://hacker-news.firebaseio.com/v0/\";\nexport const topstories=\"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\";\n\nexport const stories = `${baseURL}topstories.json`;\nexport const users = `${baseURL}user/jl.json`;\nexport const ask = `${baseURL}askstories.json`;\nexport const show = `${baseURL}showstories.json`;\nexport const job = `${baseURL}jobstories.json`;\nexport const newStory = `${baseURL}newstories.json`;\nexport const best = `${baseURL}beststories.json`;","import axios from \"axios\";\nimport {topstories} from \"./hackernewsurl\"\n\nexport const getData = async function(start:number, end:number) {\n    const arr :any = [];\n    try {\n      const { data } = await axios.get( topstories\n      );\n      data.slice(start, end).map((item :any)=> arr.push(item));\n    } catch (error) {\n      return error;\n    }\n    return arr;\n  };\n\n  export const getDetails = async function(arr:any) {\n    const promises = arr.map(async (item:any) => {\n      const { data } = await axios.get(\n        `https://hacker-news.firebaseio.com/v0/item/${item}.json?print=pretty`\n      );\n      return {\n        item,\n        author: data.by,\n        title: data.title,\n        score: data.score,\n        comments_count: data.descendants,\n        time: data.time,\n        url:\n          data.url != null\n            ? data.url\n            : `https://news.ycombinator.com/item?id=${item}`\n      };\n    });\n    const results = await Promise.all(promises);\n    return results;\n  };\n\n  \n","import React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n//import axios from \"axios\";\nimport Stories from \"../molecules/Stories\";\n//import Loader from \"./layouts/Loader\";\nimport {getData,getDetails} from \"../services/servicecalls\"\n\nconst Posts = (props:any) => {\n  const [state, setState] = useState([]);\n  const [count, setCount] = useState(21);\n  const [isLoading, setLoading] = useState(false);\n\n  \n  \n\n  useEffect(() => {\n    // function executes here ,calling two async function\n    getData(0, 20).then(arr => {\n        getDetails(arr).then((item:any) =>\n        setState(item)\n      );\n    });\n  }, []);\n\n\n  //return statement\n  return (\n    <>\n    \n        <>\n          <div\n            className={\n              isLoading\n                ? \"container-fluid main overlay\"\n                : \"container-fluid main\"\n            }\n          >\n            <table className=\"table\">\n              <tbody>\n                <Stories state={state} />\n              </tbody>\n            </table>\n          </div>\n          \n        </>\n      \n    </>\n  );\n};\n\nexport default withRouter(Posts);\n","import React from 'react';\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport Posts from \"./organisms/Topstories\"\n\nfunction App() {\n  return (\n    <> <Router>\n      <Route path=\"/\" strict exact component={Posts} />\n    </Router>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}